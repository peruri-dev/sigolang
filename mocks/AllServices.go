// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "sigolang/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AllServices is an autogenerated mock type for the AllServices type
type AllServices struct {
	mock.Mock
}

// SendNotification provides a mock function with given fields: ctx
func (_m *AllServices) SendNotification(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserCreate provides a mock function with given fields: ctx, name, emails
func (_m *AllServices) UserCreate(ctx context.Context, name string, emails []string) (*model.User, error) {
	ret := _m.Called(ctx, name, emails)

	if len(ret) == 0 {
		panic("no return value specified for UserCreate")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*model.User, error)); ok {
		return rf(ctx, name, emails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *model.User); ok {
		r0 = rf(ctx, name, emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, name, emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields: _a0
func (_m *AllServices) UserList(_a0 context.Context) ([]model.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UserList")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAllServices creates a new instance of AllServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAllServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *AllServices {
	mock := &AllServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
